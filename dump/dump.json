{"initialized":[{"order":0,"type":"config.Config","id":"","file":"/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gicex/internal/config/config.go","line_start":29,"line_end":52,"direct_deps":null},{"order":1,"type":"*system.System","id":"","file":"/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gicex/internal/system/system.go","line_start":14,"line_end":64,"direct_deps":[{"type":"config.Config","id":""}]},{"order":2,"type":"*repos.SomeRepo","id":"","file":"/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gicex/internal/repos/some.go","line_start":9,"line_end":14,"direct_deps":[{"type":"*system.System","id":""}]},{"order":3,"type":"*services.SomeService","id":"","file":"/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gicex/internal/services/some.go","line_start":8,"line_end":13,"direct_deps":[{"type":"*repos.SomeRepo","id":""}]}],"files":{"/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gicex/internal/config/config.go":["package config","","import (","\t\"fmt\"","\t\"github.com/sabahtalateh/gic\"","\t\"gopkg.in/yaml.v3\"","\t\"os\"","\t\"time\"",")","","type App struct {","\tStartTimeout time.Duration `yaml:\"start_timeout\"`","\tStopTimeout  time.Duration `yaml:\"stop_timeout\"`","}","","type DB struct {","\tHost     string `yaml:\"host\"`","\tPort     int    `yaml:\"port\"`","\tUser     string `yaml:\"user\"`","\tPassword string `yaml:\"password\"`","\tDBName   string `yaml:\"dbname\"`","}","","type Config struct {","\tApp App `yaml:\"app\"`","\tDB  DB  `yaml:\"db\"`","}","","func init() {","\tgic.Add[Config](","\t\tgic.WithInitE(func() (Config, error) {","\t\t\tvar (","\t\t\t\tc Config","\t\t\t)","","\t\t\tfile := os.Getenv(\"CONFIG_FILE\")","\t\t\tif file == \"\" {","\t\t\t\treturn c, fmt.Errorf(\"provide CONFIG_FILE env var\")","\t\t\t}","","\t\t\tbb, err := os.ReadFile(file)","\t\t\tif err != nil {","\t\t\t\treturn c, err","\t\t\t}","","\t\t\tif err = yaml.Unmarshal(bb, \u0026c); err != nil {","\t\t\t\treturn c, err","\t\t\t}","","\t\t\treturn c, nil","\t\t}),","\t)","}",""],"/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gicex/internal/repos/some.go":["package repos","","import (","\t\"database/sql\"","\t\"github.com/sabahtalateh/gic\"","\t\"github.com/sabahtalateh/gicex/internal/system\"",")","","func init() {","\tgic.Add[*SomeRepo](","\t\tgic.WithInit(func() *SomeRepo {","\t\t\treturn \u0026SomeRepo{db: gic.MustGet[*system.System]().DB}","\t\t}),","\t)","}","","type SomeRepo struct {","\tdb *sql.DB","}","","func (s *SomeRepo) GetSome() (string, error) {","\trows, err := s.db.Query(\"SELECT 'SOME'\")","\tif err != nil {","\t\treturn \"\", err","\t}","\tdefer rows.Close()","","\tfor rows.Next() {","\t\tvar some string","\t\terr = rows.Scan(\u0026some)","\t\tif err != nil {","\t\t\treturn \"\", err","\t\t}","\t\treturn some, nil","\t}","","\treturn \"\", nil","}",""],"/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gicex/internal/services/some.go":["package services","","import (","\t\"github.com/sabahtalateh/gic\"","\t\"github.com/sabahtalateh/gicex/internal/repos\"",")","","func init() {","\tgic.Add[*SomeService](","\t\tgic.WithInit(func() *SomeService {","\t\t\treturn \u0026SomeService{r: gic.MustGet[*repos.SomeRepo]()}","\t\t}),","\t)","}","","type SomeRepo interface {","\tGetSome() (string, error)","}","","type SomeService struct {","\tr SomeRepo","}","","func (s *SomeService) GetSome() (string, error) {","\treturn s.r.GetSome()","}",""],"/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gicex/internal/system/system.go":["package system","","import (","\t\"context\"","\t\"database/sql\"","\t\"errors\"","\t\"fmt\"","\t_ \"github.com/lib/pq\"","","\t\"github.com/sabahtalateh/gic\"","\t\"github.com/sabahtalateh/gicex/internal/config\"",")","","func init() {","\tgic.Add[*System](","\t\tgic.WithInitE(func() (*System, error) {","\t\t\tdbConf := gic.MustGet[config.Config]().DB","\t\t\tpsqlconn := fmt.Sprintf(\"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable\",","\t\t\t\tdbConf.Host,","\t\t\t\tdbConf.Port,","\t\t\t\tdbConf.User,","\t\t\t\tdbConf.Password,","\t\t\t\tdbConf.DBName,","\t\t\t)","\t\t\tdb, err := sql.Open(\"postgres\", psqlconn)","\t\t\tif err != nil {","\t\t\t\treturn nil, err","\t\t\t}","","\t\t\treturn \u0026System{DB: db}, nil","\t\t}),","\t\tgic.WithStart(func(ctx context.Context, s *System) error {","\t\t\terrC := make(chan error)","\t\t\tgo func() {","\t\t\t\tif err := s.DB.Ping(); err != nil {","\t\t\t\t\terrC \u003c- errors.Join(fmt.Errorf(\"can not start database\"), err)","\t\t\t\t}","\t\t\t\terrC \u003c- nil","\t\t\t}()","","\t\t\tselect {","\t\t\tcase \u003c-ctx.Done():","\t\t\t\treturn errors.Join(fmt.Errorf(\"not started\"), ctx.Err())","\t\t\tcase err := \u003c-errC:","\t\t\t\treturn err","\t\t\t}","\t\t}),","\t\tgic.WithStop(func(ctx context.Context, s *System) error {","\t\t\terrC := make(chan error)","\t\t\tgo func() {","\t\t\t\tif err := s.DB.Close(); err != nil {","\t\t\t\t\terrC \u003c- errors.Join(fmt.Errorf(\"database not stopped\"), err)","\t\t\t\t}","\t\t\t\terrC \u003c- nil","\t\t\t}()","","\t\t\tselect {","\t\t\tcase \u003c-ctx.Done():","\t\t\t\treturn errors.Join(fmt.Errorf(\"not stopped\"), ctx.Err())","\t\t\tcase err := \u003c-errC:","\t\t\t\treturn err","\t\t\t}","\t\t}),","\t)","}","","type System struct {","\tDB *sql.DB","}",""]},"stages":[{"id":"Start","order":"","parallel":true},{"id":"Stop","order":"","parallel":true}],"stage_impls":{"Start":[{"type":"*system.System","id":""}],"Stop":[{"type":"*system.System","id":""}]}}